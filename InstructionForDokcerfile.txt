o ADD [OPTIONS] <src> ... <dest>:
- copies new files or directories from <src> and adds them to the filesystem of the image at the path <dest>.
  available OPTIONS:
  - --keep-git-dir=<boolean>: if <src> is the HTTP or SSH address of a remote Git repository,
  		adds the contents of the Git repository to the image exlcuding the .git direcory by default;
  - --checksum=<hash>: lets you verify the checksum of a remote resource. The checksum is formatted as "sha256:<hash>".
  		SHA-256 is the only supported hash algorithm;
  - --chown=<user>:<group>: specifies a given username, groupname or UID/GID combination to request specific ownership;
  - --chmod=<perms> ...: specifies the given permissions;
  - --link=<boolean>: allows you to add files with enhanced semantics where the files remain independent
  		on their own layer and don't get invalidated when commands on previous layer are changed;
  - --exclude=<path> ...: specify a path expression for files to be excluded;

o ARG <name>[=<default value>]:
- defines a variable that users can pass at built-time to be builder with "docker build" command using the "--build-arg <varname>=<value>" flag

o CMD ["executable", "param1", "param2"](exec form); ["param1", "param2"] (exec form, as default parameters to ENTRYPOINT); command param1 param2(shell form):
- only one CMD instruction in a Dockerfile. if multiple CMD instruction, only the last one takes effect. The purpose is to provide defaults for an executing container

o COPY [OPTIONS] <src> ... <dest>:
- see ADD
  available OPTIONS:
  - --chmod=<perms>: see ADD;
  - --chown=<user>:<group>: see ADD;
  - --link=<boolean>: see ADD;
  - --exclude=<path> ...: see ADD;
  - --form=<image|stage|context>: lets you copies files from an image, a build stage, or a named context instead;
  - --parents[=<boolean>]: preserves parent direcories for <src> entries

o ENTRYPOINT ["executable", "param1", "param2"](exec form); command param1 param2 (shell form):
- allows you to configure a container that will run as an executable

o ENV <key>=<value> ...:
- sets the environment varaible <key> to the value <value>.

o EXPOSE <port> [<port>/<protocol>...]:
- informs Docker that the container listens on the specified network ports at runtime. you can specify whether the port listens on TCP or UDP, the default is TCP if <protocol> is not specify

o FROM [--platform=<platform>] <image> [AS <name>]; [--platform=<platform>] <image>[:<tag>] [AS <name>]; [--platform=<platform>] <image>[@<digest>] [AS <name>]:
- initializes a new build stage and sets the base image for subsequent instructions. a valid Dockerfile must start with a FORM instruction
  the optional "--platform=<platform>" flag can be used to specify the platform of the image in case FORM references a multi-platform image

o HEALTHCHECK [OPTIONS] CMD comand; NONE:
- tells Docker how to test a container to check that it's still working. this can detect cases such as a web server stuck in a infinite loop and unable to handle new connections.
  when specified it has a health status in addiction to its normal status. this status is initially "starting". whenever a health check passes, it become "healthy", after a certain number of consecutive failures, it become "unhealthy".
  exit status:
  - 0 success: container healthy;
  - 1 unhealthy: container unhealthy;
  - 2 reserved: don't use this exit code;

  available OPTIONS:
  - --interval=DURATION;
  - --timeout=DURATION;
  - --start-period=DURATION;
  - --start-interval=DURATION;
  - --retries=N;

o LABEL <key>=<value> ...:
- add metadata to an image. an image can have multiple label

o MAINTAINER <name>:
- sets the Authorfield of the generated images. LABEL is more flexible version of this

o ONBUILD INSTRUCTION:
- adds to the image a trigger instruction to be executed at a later time, when the image is used as the base for another build.
  useful if the image is used as the base to build other images

o RUN [OPTIONS] <command> ...; [OPTIONS] ["<command>", ...]:
- execute any commands to create a new layer on top of the current image.
  the shell form is most commonly used
  available OPTIONS:
  - --mount=[type=TYPE][,option=<value>[,option=<value>]...]: allows you to create filesystem mounts that the build can access.
      used to:
      - create bind mount to the host filesystem or other build stages;
      - access build secrets or ssh-agent sockets;
      - use a persistent package management cache to speed up your buind;
      the supported TYPE are:
      - bind: bind-mount context direcories(read-only);
      - cache: mount a temporary direcory to cache direcories for compilers and package managers;
      - tmpfs: mount a "tmpfs" in the build container;
      - secret: allow the build container to access secure files such as private keys without baking them into the image or build cache;
      - ssh: allow the build container to access SSH keys via SSH agent, with support for passphrases;
  - --network=TYPE: allows control over which networking environment the command is run in.
      the supported TYPE are:
      - default;
      - none: run with no network access;
      - host: run in the host's network environment;

o SHELL ["executable", "parameters"]:
- allows the default shell used for the shell form of commands to be overridden. particularly useful on Windows where there are two commonly used and quite different native shell.

o STOPSIGNAL signal:
- sets the system call signal that will be sent to te container to exit. this signal name in the format "SIG<NAME>" or an unsigned number that matches a postion in the kernel's syscall table(default is SIGTERM).
  can be overridden per container, using the "--stop-signal" flag on "docker run" and "docker create".

o USER <user>[:<group>]; UID[:GID]:
- sets the user name (or UID) and optionally the user group (or GID) to use as the default user and group for the remainder of the current stage

o VOLUME ["/data"]; /data ...:
- creates a mount point with the specified name and marks it as holding exernally mounted volumes form native host or other containers. 

o WORKDIR /path/to/workdir:
- sets the working direcory for any RUN, CMD, ENTRYPOINT, COPY and ADD instructions that follows in the Dockerfile. if it does't exist, it will be created even if it's not used in any subsequent Dockerfile instruction.
  can be used multiple time. if a relative path is provided, it will realtive to the path of the previous WORKDIR instruction
  example:
  WORKDIR /a
  WORKDIR b
  WORKDIR c
  the pwd would be /a/b/c.

