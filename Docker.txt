Docker is an open platform for developing, shipping, and running applications.
Docker provides the ability to package and run an application in a loosely isolated environment called a container.
The isolation and security lets you run many containers simultaneously on a given host.

Docker provides tooling and a platform to manage the lifecycle of your containers:

- Develop your application and its supporting components using containers.
- The container becomes the unit for distributing and testing your application.
- When you're ready, deploy your application into your production environment, as a container or an orchestrated service.
  This works the same whether your production environment is a local data center, a cloud provider, or a hybrid of the two.

Docker used for:

- Fast, consistent delivery of your applications;
- - work in standardized environments using local containers, great for continuous integration and continuous delivery (CI/CD) workflows.

- Responsive deployment and scaling;
- - highly portable workloads. Docker containers can run on a developer's local laptop, on physical or virtual machines in a data center,
	on cloud providers, or in a mixture of environments.

- Running more workloads on the same hardware;
- - Docker is lightweight and fast. It provides a viable, cost-effective alternative to hypervisor-based virtual machines,
	so you can use more of your server capacity to achieve your business goals.

Docker Architecture:

Docker uses a client-server architecture. The Docker client talks to the Docker daemon,
which does the heavy lifting of building, running, and distributing your Docker containers.
Another Docker client is Docker Compose, that lets you work with applications consisting of a set of containers.

- Docker Daemon:
- - The Docker daemon (dockerd) listens for Docker API requests and manages Docker objects such as images, containers, networks, and volumes.
	A daemon can also communicate with other daemons to manage Docker services.

- Docker Client:
- - The Docker client (docker) is the primary way that many Docker users interact with Docker. When you use commands such as docker run, the client sends these commands to dockerd,
	which carries them out. The docker command uses the Docker API. The Docker client can communicate with more than one daemon.

- Docker Desktop:
- - Docker Desktop is an environment that enables you to build and share containerized applications and microservices.
	Docker Desktop includes the Docker daemon (dockerd), the Docker client (docker), Docker Compose, Docker Content Trust, Kubernetes, and Credential Helper.

- Docker Object:
  When you use Docker, you are creating and using images, containers, networks, volumes, plugins, and other objects.

- - Images:
	An image is a read-only template with instructions for creating a Docker container. Often, an image is based on another image, with some additional customization.
	To build your own image, you create a Dockerfile with a simple syntax for defining the steps needed to create the image and run it.
	Each instruction in a Dockerfile creates a layer in the image.
	When you change the Dockerfile and rebuild the image, only those layers which have changed are rebuilt.
	This is part of what makes images so lightweight, small, and fast, when compared to other virtualization technologies.


- - Containers:
	A container is a runnable instance of an image. You can create, start, stop, move, or delete a container using the Docker API or CLI.
	You can connect a container to one or more networks, attach storage to it, or even create a new image based on its current state.
	By default, a container is relatively well isolated from other containers and its host machine.
	You can control how isolated a container's network, storage, or other underlying subsystems are from other containers or from the host machine.
	A container is defined by its image as well as any configuration options you provide to it when you create or start it.





